{"version":3,"sources":["utils/FetchClient.ts","store/reducers.ts","appSettings.ts","store/actions.ts","store/store.ts","pages/shell/NoMatch.tsx","utils/utils.ts","shared/cards/components/Card.tsx","shared/cards/components/Loader.tsx","shared/cards/CardGrid.tsx","shared/scrollContainer/ScrollContainer.tsx","shared/search/Search.tsx","pages/home/Home.tsx","pages/shell/Shell.tsx","App.tsx","serviceWorker.ts","index.tsx","shared/cards/components/Card.module.scss","shared/cards/CardGrid.module.scss","shared/search/Search.module.scss","pages/shell/Shell.module.scss","pages/home/Home.module.scss","shared/cards/components/Loader.module.scss","shared/scrollContainer/ScrollContainer.module.scss"],"names":["FetchState","FetchClient","nextUrl","cardsApiUrl","this","axios","get","params","pageSize","then","response","data","name","actionTypes","actions","getCards","dispatch","getState","a","cardState","cardsCount","cards","length","undefined","totalCount","cardListInfo","searchResponse","_totalCount","updateGetCardsFetchState","_links","next","client","fetchCards","result","type","payload","console","debug","failureGetCardsFetchState","toString","searchCardsByName","searchByName","log","resetSearchState","error","cardReducers","combineReducers","state","fetchState","Success","action","Loading","Error","rootReducer","logger","createLogger","store","createStore","applyMiddleware","thunk","NoMatch","className","styles","buildClassName","classNames","filter","join","Card","card","renderProperty","label","property","title","rarity","image","src","imageUrl","alt","description","text","set","Loader","loading","size","color","CardGrid","cardList","useSelector","renderCard","key","id","map","noResults","ScrollContainer","children","onScroll","onScrollBottom","handleScrollBottom","event","element","target","scrollTop","clientHeight","scrollHeight","Search","onSeach","onReset","useState","searchQuery","setSearchQuery","search","placeholder","onChange","newValue","onKeyDown","onClick","disabled","trim","Home","searchMode","setSearchMode","useDispatch","useEffect","query","Shell","exact","path","render","props","component","App","Boolean","window","location","hostname","match","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.512d6489.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\"\r\nimport { eslApiEndpoint } from \"../appSettings\"\r\n\r\nexport interface EslSearchResponse {\r\n    cards: CardInfo[]\r\n    _links: { next?: string; prev?: string }\r\n    _pageSize: number\r\n    _totalCount: number\r\n}\r\n\r\nexport interface CardInfo {\r\n    id: string\r\n    attributes: string[]\r\n    collectible: boolean\r\n    cost: number\r\n    imageUrl: string\r\n    name: string\r\n    rarity: string\r\n    set: CardSet\r\n    text: string\r\n    type: string\r\n    unique: boolean\r\n}\r\n\r\nexport interface CardSet {\r\n    id: string\r\n    name: string\r\n    _self: string\r\n}\r\n\r\nconst defaultPageSize = 20\r\n\r\nfunction getCardsApiUrl(): string {\r\n    return `${eslApiEndpoint}/v1/cards`\r\n}\r\n\r\n/**\r\n * Helper class to make API http requests\r\n */\r\nexport class FetchClient {\r\n    private readonly cardsApiUrl: string\r\n\r\n    constructor(nextUrl?: string) {\r\n        this.cardsApiUrl = nextUrl || getCardsApiUrl()\r\n    }\r\n\r\n    fetchCards(): Promise<EslSearchResponse> {\r\n        return axios\r\n            .get(this.cardsApiUrl, {\r\n                params: {\r\n                    pageSize: defaultPageSize,\r\n                },\r\n            })\r\n            .then((response: AxiosResponse<EslSearchResponse>) => {\r\n                return response.data\r\n            })\r\n    }\r\n\r\n    searchByName(name: string): Promise<EslSearchResponse> {\r\n        return axios\r\n            .get(this.cardsApiUrl, {\r\n                params: {\r\n                    name: name,\r\n                    pageSize: defaultPageSize,\r\n                },\r\n            })\r\n            .then((response: AxiosResponse<EslSearchResponse>) => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\n","import {\r\n    actionTypes,\r\n    GetSearchResponseAction,\r\n    SetGetCardsFailureAction,\r\n    AddCardsAction,\r\n    SetCardsAction,\r\n} from \"./actions\"\r\nimport { combineReducers } from \"redux\"\r\nimport { EslSearchResponse, CardInfo } from \"../utils/FetchClient\"\r\n\r\nexport enum FetchState {\r\n    Loading,\r\n    Success,\r\n    Error,\r\n}\r\n\r\nexport interface CardState {\r\n    cardListInfo: Readonly<{\r\n        searchResponse: EslSearchResponse | null\r\n        fetchState: FetchState\r\n        error: string\r\n    }>\r\n    cards: Readonly<CardInfo[]>\r\n}\r\n\r\nfunction cardListInfo(\r\n    state: CardState[\"cardListInfo\"] = {\r\n        searchResponse: null,\r\n        fetchState: FetchState.Success,\r\n        error: \"\",\r\n    },\r\n    action: GetSearchResponseAction | SetGetCardsFailureAction\r\n): CardState[\"cardListInfo\"] {\r\n    if (action.type === actionTypes.getCards) {\r\n        return {\r\n            searchResponse: action.payload as EslSearchResponse,\r\n            fetchState: FetchState.Success,\r\n            error: state.error,\r\n        }\r\n    } else if (action.type === actionTypes.updateGetCardsFetchState) {\r\n        return {\r\n            searchResponse: state.searchResponse,\r\n            fetchState: FetchState.Loading,\r\n            error: state.error,\r\n        }\r\n    } else if (action.type === actionTypes.failureGetCardsFetchState) {\r\n        return {\r\n            searchResponse: state.searchResponse,\r\n            fetchState: FetchState.Error,\r\n            error: action.payload as string,\r\n        }\r\n    } else if (action.type === actionTypes.resetSearchState) {\r\n        return {\r\n            searchResponse: null,\r\n            fetchState: FetchState.Success,\r\n            error: \"\",\r\n        }\r\n    }\r\n\r\n    return state\r\n}\r\n\r\nfunction cards(state: CardInfo[] = [], action: AddCardsAction | SetCardsAction): CardInfo[] {\r\n    if (action.type === actionTypes.addCards) {\r\n        return [...state, ...action.payload]\r\n    } else if (action.type === actionTypes.setCards) {\r\n        return [...action.payload]\r\n    }\r\n\r\n    return state\r\n}\r\n\r\nexport const cardReducers = combineReducers({ cardListInfo, cards })\r\n","export const eslApiEndpoint = \"https://api.elderscrollslegends.io\"\r\n","import { Action, Dispatch } from \"redux\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { FetchClient, EslSearchResponse, CardInfo } from \"../utils/FetchClient\"\r\nimport { RootState } from \"./store\"\r\n\r\ninterface PayloadAction<T> extends Action {\r\n    type: string\r\n    payload: T\r\n}\r\n\r\nexport const actionTypes = {\r\n    getCards: \"esl_getCards\",\r\n    updateGetCardsFetchState: \"esl_updateGetCardsFetchState\",\r\n    failureGetCardsFetchState: \"esl_failureGetCardsFetchState\",\r\n    addCards: \"esl_addCards\",\r\n    setCards: \"esl_setCards\",\r\n    resetSearchState: \"esl_resetSearchState\",\r\n}\r\n\r\nexport interface GetSearchResponseAction extends PayloadAction<EslSearchResponse> {}\r\nexport interface SetGetCardsFailureAction extends PayloadAction<string> {}\r\nexport interface AddCardsAction extends PayloadAction<CardInfo[]> {}\r\nexport interface SetCardsAction extends PayloadAction<CardInfo[]> {}\r\n\r\nexport type ThunkPromiseAction = ThunkAction<Promise<void>, RootState, undefined, Action>\r\nexport type ThunkVoidAction = ThunkAction<void, RootState, undefined, Action>\r\n\r\nexport const actions = {\r\n    getCards(): ThunkPromiseAction {\r\n        return async (dispatch: Dispatch<any>, getState: () => RootState): Promise<void> => {\r\n            try {\r\n                const cardState = getState().cardState\r\n                const cardsCount = cardState.cards?.length || 0\r\n                const totalCount = cardState.cardListInfo.searchResponse?._totalCount\r\n                if (totalCount !== undefined && cardsCount >= totalCount) {\r\n                    return\r\n                }\r\n\r\n                dispatch(this.updateGetCardsFetchState())\r\n                const nextUrl = cardState.cardListInfo.searchResponse?._links?.next\r\n                const client = new FetchClient(nextUrl)\r\n                const result = await client.fetchCards()\r\n                const cards = result.cards\r\n                // don't save card list twice\r\n                result.cards = []\r\n                dispatch<AddCardsAction>({\r\n                    type: actionTypes.addCards,\r\n                    payload: cards,\r\n                })\r\n                dispatch<GetSearchResponseAction>({\r\n                    type: actionTypes.getCards,\r\n                    payload: result,\r\n                })\r\n            } catch (err) {\r\n                console.debug(err)\r\n                dispatch(this.failureGetCardsFetchState(err.toString()))\r\n            }\r\n        }\r\n    },\r\n    searchCardsByName(name: string): ThunkPromiseAction {\r\n        return async (dispatch: Dispatch<any>): Promise<void> => {\r\n            try {\r\n                dispatch<SetCardsAction>({\r\n                    type: actionTypes.setCards,\r\n                    payload: [],\r\n                })\r\n                dispatch(this.updateGetCardsFetchState())\r\n                const client = new FetchClient()\r\n                const result = await client.searchByName(name)\r\n                const cards = result.cards\r\n                result.cards = []\r\n                console.log(result, \"<< Search\", cards)\r\n                dispatch<SetCardsAction>({\r\n                    type: actionTypes.setCards,\r\n                    payload: cards,\r\n                })\r\n                dispatch<GetSearchResponseAction>({\r\n                    type: actionTypes.getCards,\r\n                    payload: result,\r\n                })\r\n            } catch (err) {\r\n                dispatch(this.failureGetCardsFetchState(err.toString()))\r\n            }\r\n        }\r\n    },\r\n    resetSearchState(): ThunkVoidAction {\r\n        return (dispatch: Dispatch): void => {\r\n            dispatch({\r\n                type: actionTypes.resetSearchState,\r\n            })\r\n            dispatch<SetCardsAction>({\r\n                type: actionTypes.setCards,\r\n                payload: [],\r\n            })\r\n        }\r\n    },\r\n    updateGetCardsFetchState(): ThunkVoidAction {\r\n        return (dispatch: Dispatch): void => {\r\n            dispatch({\r\n                type: actionTypes.updateGetCardsFetchState,\r\n            })\r\n        }\r\n    },\r\n    failureGetCardsFetchState(error: string): ThunkVoidAction {\r\n        return (dispatch: Dispatch): void => {\r\n            dispatch<SetGetCardsFailureAction>({\r\n                type: actionTypes.failureGetCardsFetchState,\r\n                payload: error,\r\n            })\r\n        }\r\n    },\r\n}\r\n","import { applyMiddleware, combineReducers, createStore } from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport { cardReducers } from \"./reducers\"\r\nimport { createLogger } from \"redux-logger\"\r\n\r\nexport const rootReducer = combineReducers({\r\n    cardState: cardReducers,\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nconst logger = createLogger({\r\n    // ...options\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger))\r\n","import React from \"react\"\r\nimport styles from \"./NoMatch.module.scss\"\r\n\r\ninterface NoMatchProps {\r\n    className?: string\r\n}\r\n\r\nexport function NoMatch({ className }: NoMatchProps): JSX.Element {\r\n    return (\r\n        <div className={`NoMatch ${styles.NoMatch} ${className ?? \"\"}`}>\r\n            <div className=\"error\">Page not found</div>\r\n            {/* TOOD: redirect to the root button */}\r\n        </div>\r\n    )\r\n}\r\n","export function buildClassName(...classNames: any[]): string {\r\n    return (classNames || []).filter(name => !!name).join(\" \")\r\n}\r\n","import React from \"react\"\r\nimport styles from \"./Card.module.scss\"\r\nimport { buildClassName } from \"../../../utils/utils\"\r\nimport { CardInfo } from \"../../../utils/FetchClient\"\r\n\r\ninterface CardProps {\r\n    className?: string\r\n    card: CardInfo\r\n}\r\n\r\nexport const Card: React.FC<CardProps> = ({ className, card }): JSX.Element => {\r\n    const renderProperty = (label: string, property?: string): JSX.Element | null => {\r\n        if (!property) return null\r\n        return (\r\n            <div className={styles.property}>\r\n                <span className={styles.title}>{label}</span>\r\n                <span>{property}</span>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={buildClassName(\"Card\", styles.Card, className)}>\r\n            <div className={buildClassName(styles.name, card.rarity)}>{card.name}</div>\r\n            <div>\r\n                <img className={styles.image} src={card.imageUrl} alt={card.name} />\r\n            </div>\r\n            <div className={styles.description}>\r\n                {renderProperty(\"Text\", card.text)}\r\n                {renderProperty(\"Set\", card.set?.name)}\r\n                {renderProperty(\"Type\", card.type)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport styles from \"./Loader.module.scss\"\r\nimport { buildClassName } from \"../../../utils/utils\"\r\nimport { PropagateLoader } from \"react-spinners\"\r\n\r\ninterface LoaderProps {\r\n    className?: string\r\n    loading: boolean\r\n}\r\n\r\nexport const Loader: React.FC<LoaderProps> = ({ className, loading }): JSX.Element => {\r\n    return (\r\n        <div className={buildClassName(\"Loader\", styles.Loader, className)}>\r\n            <PropagateLoader size={40} loading={loading} color=\"#0078d4\" />\r\n        </div>\r\n    )\r\n}\r\n","import React, { UIEventHandler } from \"react\"\r\nimport styles from \"./CardGrid.module.scss\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { RootState } from \"../../store/store\"\r\nimport { CardInfo } from \"../../utils/FetchClient\"\r\nimport { Card } from \"./components/Card\"\r\nimport { buildClassName } from \"../../utils/utils\"\r\nimport { FetchState } from \"../../store/reducers\"\r\nimport { Loader } from \"./components/Loader\"\r\n\r\ninterface CardGridProps {\r\n    className?: string\r\n    onScroll?: UIEventHandler\r\n}\r\n\r\nexport const CardGrid: React.FC<CardGridProps> = ({ className }): JSX.Element => {\r\n    const { fetchState, error } = useSelector((state: RootState) => state.cardState.cardListInfo)\r\n    const cards = useSelector((state: RootState) => state.cardState.cards)\r\n\r\n    const renderCardList = (cardList: CardInfo[]): JSX.Element => {\r\n        return <div className={`${styles.cardList} card-list`}> {(cardList || []).map(renderCard)}</div>\r\n    }\r\n\r\n    const renderCard = (card: CardInfo): JSX.Element => <Card key={card.id} card={card} />\r\n\r\n    return (\r\n        <div className={buildClassName(\"CardGrid\", styles.CardGrid, className)}>\r\n            {renderCardList(cards)}\r\n            <Loader loading={fetchState === FetchState.Loading} />\r\n            {cards.length === 0 && fetchState !== FetchState.Loading && fetchState !== FetchState.Error && (\r\n                <div className={styles.noResults}>No results</div>\r\n            )}\r\n            {fetchState === FetchState.Error && <div className={styles.error}>{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n","import React, { UIEventHandler } from \"react\"\r\nimport styles from \"./ScrollContainer.module.scss\"\r\nimport { buildClassName } from \"../../utils/utils\"\r\n\r\ninterface ScrollContainerProps {\r\n    className?: string\r\n    onScroll?: UIEventHandler\r\n    onScrollBottom?: () => void\r\n}\r\n\r\nconst margin = 5\r\n\r\nexport const ScrollContainer: React.FC<ScrollContainerProps> = ({\r\n    className,\r\n    children,\r\n    onScroll,\r\n    onScrollBottom,\r\n}): JSX.Element => {\r\n    const handleSroll: UIEventHandler<HTMLDivElement> = event => {\r\n        onScroll && onScroll(event)\r\n        handleScrollBottom(event)\r\n    }\r\n\r\n    const handleScrollBottom = (event: React.UIEvent<HTMLDivElement>): void => {\r\n        // TODO: debounce with requestAnimationFrame\r\n        if (!onScrollBottom) return\r\n        const element = event.target as HTMLDivElement\r\n        if (element.scrollTop + element.clientHeight + margin >= element.scrollHeight) {\r\n            onScrollBottom()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={buildClassName(\"ScrollContainer\", styles.ScrollContainer, className)} onScroll={handleSroll}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from \"react\"\r\nimport styles from \"./Search.module.scss\"\r\nimport { buildClassName } from \"../../utils/utils\"\r\n// @ts-ignore\r\nimport SearchInput from \"react-search-input\"\r\n\r\ninterface SearchProps {\r\n    className?: string\r\n    onSeach?: (query: string) => void\r\n    onReset?: () => void\r\n}\r\n\r\nexport const Search: React.FC<SearchProps> = ({ className, onSeach, onReset }): JSX.Element => {\r\n    const [searchQuery, setSearchQuery] = useState(\"\")\r\n\r\n    return (\r\n        <div className={buildClassName(\"Search\", styles.Search, className)}>\r\n            <SearchInput\r\n                className={styles.search}\r\n                placeholder=\"Search by name\"\r\n                onChange={(newValue: string) => {\r\n                    if (!newValue && onReset) {\r\n                        onReset()\r\n                    }\r\n                    setSearchQuery(newValue)\r\n                }}\r\n                onKeyDown={(event: any) => {\r\n                    if (event.key === \"Enter\") {\r\n                        onSeach && onSeach(searchQuery)\r\n                    }\r\n                }}\r\n            />\r\n            <button\r\n                onClick={() => {\r\n                    onSeach && onSeach(searchQuery)\r\n                }}\r\n                disabled={!searchQuery.trim()}\r\n            >\r\n                Search\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from \"react\"\r\nimport styles from \"./Home.module.scss\"\r\nimport { RouteComponentProps } from \"react-router-dom\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { actions } from \"../../store/actions\"\r\nimport { buildClassName } from \"../../utils/utils\"\r\nimport { CardGrid } from \"../../shared/cards/CardGrid\"\r\nimport { ScrollContainer } from \"../../shared/scrollContainer/ScrollContainer\"\r\nimport { RootState } from \"../../store/store\"\r\nimport { FetchState } from \"../../store/reducers\"\r\nimport { Search } from \"../../shared/search/Search\"\r\n\r\ninterface HomeProps extends RouteComponentProps {\r\n    className?: string\r\n}\r\n\r\nexport function Home({ className }: HomeProps): JSX.Element {\r\n    const [searchMode, setSearchMode] = useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n    const cards = useSelector((state: RootState) => state.cardState.cards)\r\n    const { fetchState, searchResponse } = useSelector((state: RootState) => state.cardState.cardListInfo)\r\n\r\n    useEffect(() => {\r\n        if (!cards?.length) {\r\n            dispatch(actions.getCards())\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    const handleScrollBottom = (): void => {\r\n        const cardsCount = cards?.length || 0\r\n        const totalCount = searchResponse?._totalCount\r\n        if (cardsCount === totalCount) {\r\n            return\r\n        }\r\n        if (fetchState !== FetchState.Loading) {\r\n            dispatch(actions.getCards())\r\n        }\r\n    }\r\n\r\n    const handleSearch = (query: string): void => {\r\n        if (query.trim()) {\r\n            setSearchMode(true)\r\n            dispatch(actions.searchCardsByName(query.trim()))\r\n        }\r\n    }\r\n\r\n    const handleSearchReset = (): void => {\r\n        if (searchMode) {\r\n            setSearchMode(false)\r\n            dispatch(actions.resetSearchState())\r\n            dispatch(actions.getCards())\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={buildClassName(\"Home\", styles.Home, className)}>\r\n            <ScrollContainer onScrollBottom={handleScrollBottom}>\r\n                <Search onSeach={handleSearch} onReset={handleSearchReset} />\r\n                <CardGrid />\r\n            </ScrollContainer>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport styles from \"./Shell.module.scss\"\r\nimport { Switch, Route } from \"react-router-dom\"\r\nimport { NoMatch } from \"./NoMatch\"\r\nimport { Home } from \"../home/Home\"\r\n\r\ninterface ShellProps {\r\n    className?: string\r\n}\r\n\r\nexport function Shell({ className }: ShellProps): JSX.Element {\r\n    const renderRouters = (): JSX.Element => {\r\n        return (\r\n            <Switch>\r\n                <Route exact={true} path={\"/\"} render={props => <Home {...props} />} />\r\n                <Route component={NoMatch} />\r\n            </Switch>\r\n        )\r\n    }\r\n\r\n    return <div className={`Shell ${styles.Shell} ${className ?? \"\"}`}>{renderRouters()}</div>\r\n}\r\n","import React from \"react\"\nimport \"./App.scss\"\nimport { HashRouter } from \"react-router-dom\"\nimport { Provider } from \"react-redux\"\nimport { store } from \"./store/store\"\nimport { Shell } from \"./pages/shell/Shell\"\n\nconst App = () => {\n    return (\n        <HashRouter>\n            <Provider store={store}>\n                <Shell />\n            </Provider>\n        </HashRouter>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport { render } from \"react-dom\"\nimport \"./index.scss\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nrender(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"Card_Card__13KuB\",\"name\":\"Card_name__1JNoW\",\"image\":\"Card_image__hYcBS\",\"description\":\"Card_description__2S1dL\",\"property\":\"Card_property__miSIb\",\"title\":\"Card_title__3msqo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardGrid\":\"CardGrid_CardGrid__1sPE3\",\"cardList\":\"CardGrid_cardList__28h8Q\",\"noResults\":\"CardGrid_noResults__xeT67\",\"error\":\"CardGrid_error__vtpKJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Search\":\"Search_Search__2nItf\",\"search\":\"Search_search__LkDYF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Shell\":\"Shell_Shell__UHY2-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"Home_Home__1yJ2M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Loader_Loader__25h87\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ScrollContainer\":\"ScrollContainer_ScrollContainer__3EiLv\"};"],"sourceRoot":""}